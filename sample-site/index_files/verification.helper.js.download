/**
 * @Description: Helps to hold the utility methods for phone verification module
 **/
(function closure(root, factory) {
  if (typeof define === 'function' && define.amd) {
    define([
      'jquery',
      'verification.constants'
    ], function load(jQuery, constants) {
      return factory(root, jQuery, constants);
    });
  } else {
    // For non-AMD module, expose this to global (will also be useful for test cases)
    /*eslint-disable*/
    factory(root, jQuery, constants);
    /*eslint-enable*/
  }
})(this, function factory(root, $, CONSTANTS) {

  var generateHeaders = function(channelId, options) {
    var headers = {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'channelId': channelId
    };

    if (options) {
      for (var key in options) {
        headers[key] = options[key];
      }
    }

    return headers;
  };

  var generateVerify2FactorRequest = function(authId, backendHost, customerId, email, OTP) {
    return {
      "otpRequest": {
        "authId": authId,
        "backendHost": backendHost,
        "customerId": customerId,
        "loginId": email,
        "otp": OTP
      }
    };
  };

  var generateVerifyPhoneRequest = function(res, otp, phoneNumber, emailId, profileResp) {
    var req = {
      "otpRequest": {
        "authId": res.authId,
        "backendHost": res.backendHostName,
        "loginId": emailId,
        "phone": {
          "number": phoneNumber,
          "type": "MOBILE",
          "primaryFlag": "Y"
        },
        "otp": otp
      }
    };

    if (profileResp.number) {
      req.otpRequest.phone.lastModifiedDate = profileResp.lastModifiedDate;
      req.otpRequest.phone.type = profileResp.type;
      req.otpRequest.phone.contactMethodEnumeration = profileResp.contactMethodEnumeration;
      req.otpRequest.phone.primaryFlag = profileResp.primaryFlag;
      req.otpRequest.phone.secondaryFlag = profileResp.secondaryFlag;

      return req;
    }

    return req;
  };

  var getErrorMessage = function(errorCode) {
    switch (errorCode) {
      case "AUTH_ERR_122": {
        return CONSTANTS.ERRORS.INVALID_CODE;
      }
      case "AUTH_ERR_125": {
        return CONSTANTS.ERRORS.VALIDATION_FAILED_ERR;
      }
      case "AUTH_ERR_104": {
        return CONSTANTS.ERRORS.RESEND_PROMPT;
      }
      case "AUTH_ERR_126":
      case "AUTH_ERR_127":
      case "AUTH_ERR_105": {
        return CONSTANTS.ERRORS.TWO_FACTOR_ERR;
      }
      default:
        return CONSTANTS.ERRORS.SUBMIT_INTERNAL_ERR;
    }
  };

  var renderErrorVerifyPhoneOTP = function(errorText) {
    this.$verifyPhoneOTP = $('#form-input-verification');
    if (!this.$verifyPhoneOTP.hasClass("form-input--error")) {
      this.$verifyPhoneOTP.addClass("form-input--error")
        .append(
          $("<span></span>")
            .addClass('form-input-error__message')
            .text(errorText)
        )
    } else {
      this.$verifyPhoneOTP.find('.form-input-error__message')
        .text(errorText);
    }
  };

  var verificationSuccess = function(payload) {
    document.dispatchEvent(new CustomEvent("verificationSuccess", {detail: payload}));
  };

  var onSuccessHideLoader = function() {
    document.dispatchEvent(new CustomEvent("verificationDisplaySuccess"));
  };

  var onFailureHideLoader = function() {
    document.dispatchEvent(new CustomEvent("verificationDisplayFailure"));
  };


  var showResendSpinner = function() {
    $('#resend-code-spinner').attr('style', 'margin-left: 5px; visibility: visible;');
    $('.resend-code-link').attr('id', 'resend-code-disable');
  };

  var hideResendSpinner = function() {
    $('#resend-code-spinner').css('visibility', 'hidden');
  };

  var formatPhone = function(input) {
    return '(' + input.substr(0, 3) + ') ' + input.substr(3, 3) + '-' + input.substr(6);
  };

  var maskPhone = function(input) {
  	return '(•••)•••-••' + input.substr(3);
	};

  var renderOnSuccessResendResponse = function($verificationButton, $verifyOTP, successMessage) {
    $verifyOTP.length === 6 && $verificationButton.removeClass('disabled');
    $('.resend__help-message')
      .empty()
      .addClass('resend__response-success')
      .prepend(
        $('<img>')
          .addClass('resend__response-image')
          .attr('src', "/account/dist/images/success.svg"),
        $('<span></span>').text(typeof successMessage === 'string' ? successMessage : 'Code Resent'),
        $('<span></span>')
          .attr('id', 'resend-code-spinner')
          .css("visibility", "hidden")
          .addClass('segment-spinner segment-spinner--small')
      )
  };

  var renderOnFailureResendResponse = function($verificationButton, $verifyOTP) {
    $verifyOTP.length === 6 && $verificationButton.removeClass('disabled');
    $('.resend__response-message')
      .append(
        $('<img>')
          .addClass('resend__response-image')
          .attr('src', "/account/dist/images/error.svg"),
        $('<div></div>')
          .addClass('resend__response-failure')
          .append(
            $('<span></span>').text(CONSTANTS.ERRORS.RESEND_INTERNAL_ERR)
          )
      )
  };

  return {
    generateHeaders: generateHeaders,
    generateVerify2FactorRequest: generateVerify2FactorRequest,
    generateVerifyPhoneRequest: generateVerifyPhoneRequest,
    verificationSuccess: verificationSuccess,
    showResendSpinner: showResendSpinner,
    hideResendSpinner: hideResendSpinner,
    onSuccessHideLoader: onSuccessHideLoader,
    onFailureHideLoader: onFailureHideLoader,
    renderErrorVerifyPhoneOTP: renderErrorVerifyPhoneOTP,
    formatPhone: formatPhone,
    maskPhone: maskPhone,
    getErrorMessage: getErrorMessage,
    renderOnSuccessResendResponse: renderOnSuccessResendResponse,
    renderOnFailureResendResponse: renderOnFailureResendResponse
  }
})
;